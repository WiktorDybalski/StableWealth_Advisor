from time import sleep
from threading import Thread

winda_dict = {(0, 0, 0, 0, 0, 0, 0): (0, 0, 0, 0, 0, 0, 0),
              (0, 0, 0, 0, 0, 0, 1): (0, 0, 0, 1, 0, 0, 1),
              (0, 0, 0, 0, 0, 1, 0): (0, 0, 0, 1, 0, 1, 0),
              (0, 0, 0, 0, 0, 1, 1): (0, 0, 0, 1, 0, 1, 1),
              (0, 0, 0, 0, 1, 0, 0): (0, 0, 1, 1, 0, 0, 0),
              (0, 0, 0, 0, 1, 0, 1): (0, 0, 1, 1, 0, 0, 1),
              (0, 0, 0, 0, 1, 1, 0): (0, 0, 1, 1, 0, 1, 0),
              (0, 0, 0, 0, 1, 1, 1): (0, 0, 1, 1, 0, 1, 1),
              (0, 0, 0, 1, 0, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 0, 0, 1, 0, 0, 1): (0, 1, 0, 1, 0, 0, 1),
              (0, 0, 0, 1, 0, 1, 0): (0, 1, 0, 0, 0, 1, 0),
              (0, 0, 0, 1, 0, 1, 1): (0, 1, 0, 0, 0, 1, 1),
              (0, 0, 0, 1, 1, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 0, 0, 1, 1, 0, 1): (0, 1, 0, 1, 1, 0, 1),
              (0, 0, 0, 1, 1, 1, 0): (0, 1, 0, 0, 1, 1, 0),
              (0, 0, 0, 1, 1, 1, 1): (0, 1, 0, 0, 1, 1, 1),
              (0, 0, 1, 0, 0, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 0, 1, 0, 0, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 0, 1, 0, 0, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 0, 1, 0, 0, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 0, 1, 0, 1, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 0, 1, 0, 1, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 0, 1, 0, 1, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 0, 1, 0, 1, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 0, 1, 1, 0, 0, 0): (0, 0, 0, 0, 0, 0, 0),
              (0, 0, 1, 1, 0, 0, 1): (0, 0, 0, 0, 0, 0, 1),
              (0, 0, 1, 1, 0, 1, 0): (0, 0, 0, 0, 0, 1, 0),
              (0, 0, 1, 1, 0, 1, 1): (0, 0, 0, 0, 0, 1, 1),
              (0, 0, 1, 1, 1, 0, 0): (0, 0, 1, 1, 0, 0, 0),
              (0, 0, 1, 1, 1, 0, 1): (0, 0, 1, 1, 0, 0, 1),
              (0, 0, 1, 1, 1, 1, 0): (0, 0, 1, 1, 0, 1, 0),
              (0, 0, 1, 1, 1, 1, 1): (0, 0, 1, 1, 0, 1, 1),
              (0, 1, 0, 0, 0, 0, 0): (0, 1, 0, 0, 0, 0, 0),
              (0, 1, 0, 0, 0, 0, 1): (0, 1, 0, 1, 0, 0, 1),
              (0, 1, 0, 0, 0, 1, 0): (0, 1, 1, 1, 0, 0, 0),
              (0, 1, 0, 0, 0, 1, 1): (0, 1, 1, 1, 0, 0, 1),
              (0, 1, 0, 0, 1, 0, 0): (0, 1, 1, 0, 1, 0, 0),
              (0, 1, 0, 0, 1, 0, 1): (0, 1, 1, 0, 1, 0, 1),
              (0, 1, 0, 0, 1, 1, 0): (0, 1, 1, 1, 1, 0, 0),
              (0, 1, 0, 0, 1, 1, 1): (0, 1, 1, 1, 1, 0, 1),
              (0, 1, 0, 1, 0, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 1, 0, 1, 0, 0, 1): (1, 0, 0, 0, 0, 0, 1),
              (0, 1, 0, 1, 0, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 1, 0, 1, 0, 1, 1): (1, 0, 0, 0, 0, 1, 1),
              (0, 1, 0, 1, 1, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 1, 0, 1, 1, 0, 1): (1, 0, 0, 0, 1, 0, 1),
              (0, 1, 0, 1, 1, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 1, 0, 1, 1, 1, 1): (1, 0, 0, 0, 1, 1, 1),
              (0, 1, 1, 0, 0, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 1, 1, 0, 0, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 1, 1, 0, 0, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 1, 1, 0, 0, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (0, 1, 1, 0, 1, 0, 0): (0, 0, 0, 0, 1, 0, 0),
              (0, 1, 1, 0, 1, 0, 1): (0, 0, 0, 0, 1, 0, 1),
              (0, 1, 1, 0, 1, 1, 0): (0, 0, 0, 0, 1, 1, 0),
              (0, 1, 1, 0, 1, 1, 1): (0, 0, 0, 0, 1, 1, 1),
              (0, 1, 1, 1, 0, 0, 0): (0, 1, 0, 0, 0, 0, 0),
              (0, 1, 1, 1, 0, 0, 1): (0, 1, 0, 0, 0, 0, 1),
              (0, 1, 1, 1, 0, 1, 0): (0, 1, 1, 1, 0, 0, 0),
              (0, 1, 1, 1, 0, 1, 1): (0, 1, 1, 1, 0, 0, 1),
              (0, 1, 1, 1, 1, 0, 0): (0, 1, 0, 0, 1, 0, 0),
              (0, 1, 1, 1, 1, 0, 1): (0, 1, 0, 0, 1, 0, 1),
              (0, 1, 1, 1, 1, 1, 0): (0, 1, 1, 1, 1, 0, 0),
              (0, 1, 1, 1, 1, 1, 1): (0, 1, 1, 1, 1, 0, 1),
              (1, 0, 0, 0, 0, 0, 0): (1, 0, 0, 0, 0, 0, 0),
              (1, 0, 0, 0, 0, 0, 1): (1, 0, 1, 1, 0, 0, 0),
              (1, 0, 0, 0, 0, 1, 0): (1, 0, 1, 0, 0, 1, 0),
              (1, 0, 0, 0, 0, 1, 1): (1, 0, 1, 1, 0, 1, 0),
              (1, 0, 0, 0, 1, 0, 0): (1, 0, 1, 0, 1, 0, 0),
              (1, 0, 0, 0, 1, 0, 1): (1, 0, 1, 1, 1, 0, 0),
              (1, 0, 0, 0, 1, 1, 0): (1, 0, 1, 0, 1, 1, 0),
              (1, 0, 0, 0, 1, 1, 1): (1, 0, 1, 1, 1, 1, 0),
              (1, 0, 0, 1, 0, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 0, 0, 1, 0, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 0, 0, 1, 0, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 0, 0, 1, 0, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 0, 0, 1, 1, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 0, 0, 1, 1, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 0, 0, 1, 1, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 0, 0, 1, 1, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 0, 1, 0, 0, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 0, 1, 0, 0, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 0, 1, 0, 0, 1, 0): (0, 1, 0, 0, 0, 1, 0),
              (1, 0, 1, 0, 0, 1, 1): (0, 1, 0, 0, 0, 1, 1),
              (1, 0, 1, 0, 1, 0, 0): (0, 1, 1, 0, 1, 0, 0),
              (1, 0, 1, 0, 1, 0, 1): (0, 1, 1, 0, 1, 0, 1),
              (1, 0, 1, 0, 1, 1, 0): (0, 1, 0, 0, 1, 1, 0),
              (1, 0, 1, 0, 1, 1, 1): (0, 1, 0, 0, 1, 1, 1),
              (1, 0, 1, 1, 0, 0, 0): (1, 0, 0, 0, 0, 0, 0),
              (1, 0, 1, 1, 0, 0, 1): (1, 0, 1, 1, 0, 0, 0),
              (1, 0, 1, 1, 0, 1, 0): (1, 0, 0, 0, 0, 1, 0),
              (1, 0, 1, 1, 0, 1, 1): (1, 0, 1, 1, 0, 1, 0),
              (1, 0, 1, 1, 1, 0, 0): (1, 0, 0, 0, 1, 0, 0),
              (1, 0, 1, 1, 1, 0, 1): (1, 0, 1, 1, 1, 0, 0),
              (1, 0, 1, 1, 1, 1, 0): (1, 0, 0, 0, 1, 1, 0),
              (1, 0, 1, 1, 1, 1, 1): (1, 0, 1, 1, 1, 1, 0),
              (1, 1, 0, 0, 0, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 0, 0, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 0, 0, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 0, 0, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 0, 1, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 0, 1, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 0, 1, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 0, 1, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 1, 0, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 1, 0, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 1, 0, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 1, 0, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 1, 1, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 1, 1, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 1, 1, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 0, 1, 1, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 0, 0, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 0, 0, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 0, 0, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 0, 0, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 0, 1, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 0, 1, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 0, 1, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 0, 1, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 1, 0, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 1, 0, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 1, 0, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 1, 0, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 1, 1, 0, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 1, 1, 0, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 1, 1, 1, 0): ('x', 'x', 'x', 'x', 'x', 'x', 'x'),
              (1, 1, 1, 1, 1, 1, 1): ('x', 'x', 'x', 'x', 'x', 'x', 'x')}


def kierunek(a, b):
    if a == 1 and b == 1:
        return 'stoi (drzwi otwarte)'
    if a == 0 and b == 0:
        return 'stoi (drzwi zamkniete)'
    if a == 0:
        return 'do gory'
    return 'w dol'


curr_state = (0, 0, 0, 0, 0, 0, 0)
last_state = (-1)
curr_input = [0, 0, 0]


def elevator_sim():
    global curr_input, curr_state, last_state, winda_dict
    while True:
        curr_state = winda_dict[curr_state]
        curr_state = (curr_state[0], curr_state[1], curr_state[2], curr_state[3],
                  curr_state[4] or curr_input[0], curr_state[5] or curr_input[1], curr_state[6] or
                  curr_input[2])
        curr_input = [0, 0, 0]
        if last_state != curr_state:
            print(f'Pietro: {int(str(curr_state[0]) + str(curr_state[1]), 2)},Kierunek: {kierunek(curr_state[2], curr_state[3])}, P1: {curr_state[4]},P2: {curr_state[5]}, P3: {curr_state[6]} ', curr_state)

        last_state = curr_state
        sleep(1)


def user_input():
    global curr_input, curr_state, last_state, winda_dict
    while True:
        user_input = input()  # input level
        if user_input == '0': curr_input[0] = 1
        if user_input == '1': curr_input[1] = 1
        if user_input == '2': curr_input[2] = 1


elevator_thread = Thread(target=elevator_sim)
elevator_thread.daemon = True
elevator_thread.start()
input_thread = Thread(target=user_input)
input_thread.daemon = True
input_thread.start()
elevator_thread.join()
input_thread.join()
